{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst BigNumber = require('bignumber.js');\n\nconst Contract = require('../../caver-contract');\n\nconst _require = require('./kctHelper'),\n      validateDeployParameterForKIP17 = _require.validateDeployParameterForKIP17,\n      kip17JsonInterface = _require.kip17JsonInterface,\n      kip17ByteCode = _require.kip17ByteCode,\n      determineSendParams = _require.determineSendParams,\n      formatParamForUint256 = _require.formatParamForUint256,\n      interfaceIds = _require.interfaceIds;\n\nconst _require2 = require('../../caver-utils/src'),\n      toBuffer = _require2.toBuffer,\n      isHexStrict = _require2.isHexStrict,\n      toHex = _require2.toHex;\n\nconst _require3 = require('../../caver-utils/src'),\n      isAddress = _require3.isAddress;\n\nconst KIP13 = require('./kip13');\n/**\n * The KIP17 class that helps you easily handle a smart contract that implements KIP-17 as a JavaScript object on the Klaytn blockchain platform (Klaytn).\n * @hideconstructor\n * @class\n */\n\n\nclass KIP17 extends Contract {\n  /**\n   * Deploys a KIP-17 token contract to Klaytn network.\n   *\n   * By default, it returns a KIP17 instance when the deployment is finished.\n   * If you define a custom function in the `contractDeployFormatter` field in {@link Contract.SendOptions|SendOptions}, you can control return type.\n   *\n   * @example\n   * const tokenInfo = { name: 'TokenName', symbol: 'TKN' }\n   *\n   * // Below example will use `caver.wallet`.\n   * const deployed = await caver.kct.kip17.deploy(tokenInfo, '0x{deployer address}')\n   *\n   * // Use sendOptions instead of deployer address.\n   * const sendOptions = { from: '0x{deployer address}', feeDelegation: true, feePayer: '0x{fee payer address}' }\n   * const deployed = await caver.kct.kip17.deploy(tokenInfo, sendOptions)\n   *\n   * // If you want to use your own wallet that implements the 'IWallet' interface, pass it into the last parameter.\n   * const deployed = await caver.kct.kip17.deploy(tokenInfo, '0x{deployer address}', wallet)\n   *\n   * @ignore\n   * @param {KIP17.KIP17DeployParams} tokenInfo The object that defines the name and symbol of the token to deploy.\n   * @param {Contract.SendOptions|string} sendOptions The address of the account to deploy the KIP-17 token contract or an object holding parameters that are required for sending a transaction.\n   * @return {Promise<*>}\n   */\n  static deploy(tokenInfo, sendOptions) {\n    validateDeployParameterForKIP17(tokenInfo);\n    const name = tokenInfo.name,\n          symbol = tokenInfo.symbol;\n    const kip17 = new KIP17(); // If sendOptions is string type, sendOptions means deployer's address\n\n    if (_.isString(sendOptions)) sendOptions = {\n      from: sendOptions,\n      gas: 6600000,\n      value: 0\n    };\n    sendOptions.gas = sendOptions.gas !== undefined ? sendOptions.gas : 6600000;\n    return kip17.deploy({\n      data: kip17ByteCode,\n      arguments: [name, symbol]\n    }).send(sendOptions);\n  }\n  /**\n   * An object that defines the parameters required to deploy the KIP-17 contract.\n   *\n   * @typedef {object} KIP17.KIP17DetectedObject\n   * @property {boolean} IKIP17 - Whether to implement `IKIP17` interface.\n   * @property {boolean} IKIP17Metadata - Whether to implement `IKIP17Metadata` interface.\n   * @property {boolean} IKIP17Enumerable - Whether to implement `IKIP17Enumerable` interface.\n   * @property {boolean} IKIP17Mintable - Whether to implement `IKIP17Mintable` interface.\n   * @property {boolean} IKIP17MetadataMintable - Whether to implement `IKIP17MetadataMintable` interface.\n   * @property {boolean} IKIP17Burnable - Whether to implement `IKIP17Burnable` interface.\n   * @property {boolean} IKIP17Pausable - Whether to implement `IKIP17Pausable` interface.\n   */\n\n  /**\n   * Returns the information of the interface implemented by the token contract.\n   *\n   * @example\n   * const detected = await caver.kct.kip17.detectInterface('0x{address in hex}')\n   *\n   * @param {string} contractAddress The address of the KIP-17 token contract to detect.\n   * @return {Promise<KIP17.KIP17DetectedObject>}\n   */\n\n\n  static detectInterface(contractAddress) {\n    const kip17 = new KIP17(contractAddress);\n    return kip17.detectInterface();\n  }\n  /**\n   * KIP17 class represents the KIP-17 token contract.\n   *\n   * @constructor\n   * @param {string} tokenAddress - The KIP-17 token contract address.\n   * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-17.\n   */\n\n\n  constructor(tokenAddress, abi = kip17JsonInterface) {\n    if (tokenAddress) {\n      if (_.isString(tokenAddress)) {\n        if (!isAddress(tokenAddress)) throw new Error(\"Invalid token address \".concat(tokenAddress));\n      } else {\n        abi = tokenAddress;\n        tokenAddress = undefined;\n      }\n    }\n\n    super(abi, tokenAddress);\n  }\n  /**\n   * Clones the current KIP17 instance.\n   *\n   * @example\n   * const cloned = kip17.clone()\n   * const cloned = kip17.clone('0x{new kip17 address}')\n   *\n   * @param {string} [tokenAddress] The address of the token contract.\n   * @return {KIP17}\n   */\n\n\n  clone(tokenAddress = this.options.address) {\n    const cloned = new this.constructor(tokenAddress, this.options.jsonInterface);\n    cloned.setWallet(this._wallet);\n    return cloned;\n  }\n  /**\n   * Returns the information of the interface implemented by the token contract.\n   *\n   * @example\n   * const detected = await kip17.detectInterface()\n   *\n   * @return {Promise<KIP17.KIP17DetectedObject>}\n   */\n\n\n  async detectInterface() {\n    const detected = {\n      IKIP17: false,\n      IKIP17Metadata: false,\n      IKIP17Enumerable: false,\n      IKIP17Mintable: false,\n      IKIP17MetadataMintable: false,\n      IKIP17Burnable: false,\n      IKIP17Pausable: false\n    };\n    const notSupportedMsg = \"This contract does not support KIP-13.\";\n    const contractAddress = this._address;\n\n    try {\n      const isSupported = await KIP13.isImplementedKIP13Interface(contractAddress);\n      if (isSupported !== true) throw new Error(notSupportedMsg); // Since there is an extension that has the same interface id even though it is a different KCT,\n      // it must be checked first whether the contract is a KIP-17 contract.\n\n      detected.IKIP17 = await this.supportsInterface(interfaceIds.kip17.IKIP17);\n      if (detected.IKIP17 === false) return detected;\n      await Promise.all(Object.keys(interfaceIds.kip17).map(async interfaceName => {\n        if (interfaceIds.kip17[interfaceName] !== interfaceIds.kip17.IKIP17) detected[interfaceName] = await this.supportsInterface(interfaceIds.kip17[interfaceName]);\n      }));\n      return detected;\n    } catch (e) {\n      throw new Error(notSupportedMsg);\n    }\n  }\n  /**\n   * Returns `true` if this contract implements the interface defined by `interfaceId`.\n   *\n   * @example\n   * const supported = await kip17.supportsInterface('0x80ac58cd')\n   *\n   * @param {string} interfaceId The interface id to check.\n   * @return {Promise<boolean>}\n   */\n\n\n  async supportsInterface(interfaceId) {\n    const isSupported = await this.methods.supportsInterface(interfaceId).call();\n    return isSupported;\n  }\n  /**\n   * Returns the name of the token.\n   *\n   * @example\n   * const name = await kip17.name()\n   *\n   * @return {Promise<string>}\n   */\n\n\n  async name() {\n    const name = await this.methods.name().call();\n    return name;\n  }\n  /**\n   * Returns the symbol of the token.\n   *\n   * @example\n   * const symbol = await kip17.symbol()\n   *\n   * @return {Promise<string>}\n   */\n\n\n  async symbol() {\n    const symbol = await this.methods.symbol().call();\n    return symbol;\n  }\n  /**\n   * Returns the URI for a given token id.\n   *\n   * @example\n   * const tokenURI = await kip17.tokenURI(0)\n   *\n   * @param {BigNumber|string|number} tokenId The id of the token.\n   * @return {Promise<string>}\n   */\n\n\n  async tokenURI(tokenId) {\n    const tokenURI = await this.methods.tokenURI(formatParamForUint256(tokenId)).call();\n    return tokenURI;\n  }\n  /**\n   * Returns the total number of tokens minted by the contract.\n   *\n   * @example\n   * const totalSupply = await kip17.totalSupply()\n   *\n   * @return {Promise<BigNumber>}\n   */\n\n\n  async totalSupply() {\n    const totalSupply = await this.methods.totalSupply().call();\n    return new BigNumber(totalSupply);\n  }\n  /**\n   * Searches the `owner`'s token list for the given index, and returns the token id of a token positioned at the matched index in the list if there is a match.\n   *\n   * @example\n   * const token = await kip17.tokenOfOwnerByIndex('0x{address in hex}', 5)\n   *\n   * @param {string} owner The address of the account who owns tokens.\n   * @param {BigNumber|string|number} index The index of a token in owner's token list.\n   * @return {Promise<BigNumber>}\n   */\n\n\n  async tokenOfOwnerByIndex(owner, index) {\n    const token = await this.methods.tokenOfOwnerByIndex(owner, formatParamForUint256(index)).call();\n    return new BigNumber(token);\n  }\n  /**\n   * Searches the list of all tokens in this contract for the given index, and returns the token id of a token positioned at the matched index in the list if there is a match.\n   * It reverts if the index is greater or equal to the total number of tokens.\n   *\n   * @example\n   * const token = await kip17.tokenByIndex(1)\n   *\n   * @param {BigNumber|string|number} index The index of the token to query.\n   * @return {Promise<BigNumber>}\n   */\n\n\n  async tokenByIndex(index) {\n    const token = await this.methods.tokenByIndex(formatParamForUint256(index)).call();\n    return new BigNumber(token);\n  }\n  /**\n   * Returns the balance of the given account address.\n   * The balance of an account in KIP-17 is the total number of NFTs (Non-Fungible Tokens) owned by the account.\n   *\n   * @example\n   * const balance = await kip17.balanceOf('0x{address in hex}')\n   *\n   * @param {string} account The address of the account to be checked for its balance.\n   * @return {Promise<BigNumber>}\n   */\n\n\n  async balanceOf(account) {\n    const balance = await this.methods.balanceOf(account).call();\n    return new BigNumber(balance);\n  }\n  /**\n   * Returns the address of the owner of the specified token id.\n   *\n   * @example\n   * const owner = await kip17.ownerOf(8)\n   *\n   * @param {BigNumber|string|number} tokenId The id of the token.\n   * @return {Promise<string>}\n   */\n\n\n  async ownerOf(tokenId) {\n    const owner = await this.methods.ownerOf(formatParamForUint256(tokenId)).call();\n    return owner;\n  }\n  /**\n   * Returns the address who was permitted to transfer this token, or 'zero' address, if no address was approved.\n   * It reverts if the given token id does not exist.\n   *\n   * @example\n   * const approvedAddress = await kip17.getApproved(10)\n   *\n   * @param {BigNumber|string|number} tokenId The id of the token.\n   * @return {Promise<string>}\n   */\n\n\n  async getApproved(tokenId) {\n    const isApproved = await this.methods.getApproved(formatParamForUint256(tokenId)).call();\n    return isApproved;\n  }\n  /**\n   * Returns `true` if an `operator` is approved to transfer all tokens that belong to the `owner`.\n   *\n   * @example\n   * const isApprovedForAll = await kip17.isApprovedForAll('0x{address in hex}', '0x{address in hex}')\n   *\n   * @param {string} owner The id of the token.\n   * @param {string} operator The id of the token.\n   * @return {Promise<boolean>}\n   */\n\n\n  async isApprovedForAll(owner, operator) {\n    const isApprovedForAll = await this.methods.isApprovedForAll(owner, operator).call();\n    return isApprovedForAll;\n  }\n  /**\n   * Returns true if the given account is a minter who can issue new tokens in the current contract conforming to KIP-17.\n   *\n   * @example\n   * const isMinter = await kip17.isMinter('0x{address in hex}')\n   *\n   * @param {string} account The address of the account to be checked for having the minting right.\n   * @return {Promise<boolean>}\n   */\n\n\n  async isMinter(account) {\n    const isMinter = await this.methods.isMinter(account).call();\n    return isMinter;\n  }\n  /**\n   * Returns true if the contract is paused, and false otherwise.\n   *\n   * @example\n   * const isPaused = await kip17.paused()\n   *\n   * @return {Promise<boolean>}\n   */\n\n\n  async paused() {\n    const isPaused = await this.methods.paused().call();\n    return isPaused;\n  }\n  /**\n   * Returns `true` if the given account is a pauser who can suspend transferring tokens.\n   *\n   * @example\n   * const isPauser = await kip17.isPauser('0x{address in hex}')\n   *\n   * @param {string} account The address of the account you want to check pauser or not.\n   * @return {Promise<boolean>}\n   */\n\n\n  async isPauser(account) {\n    const isPauser = await this.methods.isPauser(account).call();\n    return isPauser;\n  }\n  /**\n   * Approves another address to transfer a token of the given token id.\n   * The zero address indicates there is no approved address.\n   * There can only be one approved address per token.\n   * This method is allowed to call only by the token owner or an approved operator.\n   *\n   * @example\n   * const receipt = await kip17.approve('0x{address in hex}', 10, { from: '0x{address in hex}' })\n   *\n   * @param {string} to The address of the account who spends tokens in place of the owner.\n   * @param {BigNumber|string|number} tokenId The id of the token the spender is allowed to use.\n   * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async approve(to, tokenId, sendParam = {}) {\n    const executableObj = this.methods.approve(to, formatParamForUint256(tokenId));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Approves the given operator `to`, or disallow the given operator, to transfer all tokens of the `owner`.\n   *\n   * @example\n   * const receipt = await kip17.setApprovalForAll('0x{address in hex}', false, { from: '0x{address in hex}' })\n   *\n   * @param {string} to The address of an account to be approved/prohibited to transfer the owner's all tokens.\n   * @param {boolean} approved This operator will be approved if `true`. The operator will be disallowed if `false`.\n   * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async setApprovalForAll(to, approved, sendParam = {}) {\n    const executableObj = this.methods.setApprovalForAll(to, approved);\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Transfers the token of the given token id `tokenId` from the token `owner`'s balance to another address.\n   *\n   * The address who was approved to send the token owner's token (the `operator`) or the token `owner` itself is expected to execute this token transferring transaction.\n   * Thus, the approved one or the token owner should be the sender of this transaction whose address must be given at `sendParam.from` or `kip17Instance.options.from`.\n   * Without `sendParam.from` nor `kip17Instance.options.from` being provided, an error would occur.\n   *\n   * It is recommended to use {@link safeTransferFrom} whenever possible instead of this method.\n   *\n   * @example\n   * const receipt = await kip17.transferFrom('0x{address in hex}', '0x{address in hex}', 2, { from: '0x{address in hex}' })\n   *\n   * @param {string} from The address of the owner or approved of the given token.\n   * @param {string} to The address of the account to receive the token.\n   * @param {BigNumber|string|number} tokenId The id of token you want to transfer.\n   * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async transferFrom(from, to, tokenId, sendParam = {}) {\n    const executableObj = this.methods.transferFrom(from, to, formatParamForUint256(tokenId));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Safely transfers the token of the given token id `tokenId` from the token `owner`'s balance to another address.\n   *\n   * The address who was approved to send the token owner's token (the `operator`) or the token `owner` itself is expected to execute this token transferring transaction.\n   * Thus, the approved one or the token owner should be the sender of this transaction whose address must be given at `sendParam.from` or `kip17Instance.options.from`.\n   * Without `sendParam.from` nor `kip17Instance.options.from` being provided, an error would occur.\n   *\n   * @example\n   * const receipt = await kip17.safeTransferFrom('0x{address in hex}', '0x{address in hex}', 9, { from: '0x{address in hex}' })\n   *\n   * @param {string} from The address of the owner or approved of the given token.\n   * @param {string} to The address of the account to receive the token.\n   * @param {BigNumber|string|number} tokenId The id of token you want to transfer.\n   * @param {Buffer|string|number} [data] The optional data to send along with the call.\n   * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async safeTransferFrom(from, to, tokenId, data, sendParam = {}) {\n    if (data && _.isObject(data)) {\n      if (data.gas !== undefined || data.from !== undefined) {\n        if (Object.keys(sendParam).length > 0) throw new Error(\"Invalid parameters\");\n        sendParam = data;\n        data = undefined;\n      }\n    }\n\n    if (data && !_.isBuffer(data)) {\n      if (_.isString(data) && !isHexStrict(data)) data = toHex(data);\n      data = toBuffer(data);\n    }\n\n    const executableObj = data ? this.methods.safeTransferFrom(from, to, formatParamForUint256(tokenId), data) : this.methods.safeTransferFrom(from, to, formatParamForUint256(tokenId));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Adds an account as a minter, who are permitted to mint tokens.\n   * If `sendParam.from` or `kip17.options.from` were given, it should be a minter with MinterRole.\n   *\n   * @example\n   * const receipt = await kip17.addMinter('0x{address in hex}', { from: '0x{address in hex}' })\n   *\n   * @param {string} account The address of account to add as minter.\n   * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async addMinter(account, sendParam = {}) {\n    const executableObj = this.methods.addMinter(account);\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Renounces the right to mint tokens. Only a minter address can renounce the minting right.\n   * If `sendParam.from` or `kip17.options.from` were given, it should be a minter with MinterRole.\n   *\n   * @example\n   * const receipt = await kip17.renounceMinter({ from: '0x{address in hex}' })\n   *\n   * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async renounceMinter(sendParam = {}) {\n    const executableObj = this.methods.renounceMinter();\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Creates token and assigns them to account, increasing the total supply.\n   * If `sendParam.from` or `kip17.options.from` were given, it should be a minter with MinterRole.\n   *\n   * @example\n   * const receipt = await kip17.mint('0x{address in hex}', 20, { from: '0x{address in hex}' })\n   *\n   * @param {string} to The address of the account to which the minted token will be allocated.\n   * @param {BigNumber|string|number} tokenId The id of token to mint.\n   * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async mint(to, tokenId, sendParam = {}) {\n    const executableObj = this.methods.mint(to, formatParamForUint256(tokenId));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Creates a token with the given uri and assigns them to the given account.\n   * This method increases the total supply of this token.\n   * If `sendParam.from` or `kip17.options.from` were given, it should be a minter with MinterRole.\n   *\n   * @example\n   * const receipt = await kip17.mintWithTokenURI('0x{address in hex}', 18, tokenURI, { from: '0x{address in hex}' })\n   *\n   * @param {string} to The address of the account to which the minted token will be allocated.\n   * @param {BigNumber|string|number} tokenId The id of token to mint.\n   * @param {string} tokenURI The uri of token to mint.\n   * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async mintWithTokenURI(to, tokenId, tokenURI, sendParam = {}) {\n    const executableObj = this.methods.mintWithTokenURI(to, formatParamForUint256(tokenId), tokenURI);\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Destroys the token of the given token id.\n   * Without `sendParam.from` nor `kip17.options.from` being provided, an error would occur.\n   *\n   * @example\n   * const receipt = await kip17.burn(14, { from: '0x{address in hex}' })\n   *\n   * @param {BigNumber|string|number} tokenId The id of token to destroy.\n   * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async burn(tokenId, sendParam = {}) {\n    const executableObj = this.methods.burn(formatParamForUint256(tokenId));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Suspends functions related to sending tokens.\n   * If `sendParam.from` or `kip17.options.from` were given, it should be a pauser with PauserRole.\n   *\n   * @example\n   * const receipt = await kip17.pause({ from: '0x{address in hex}' })\n   *\n   * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async pause(sendParam = {}) {\n    const executableObj = this.methods.pause();\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Resumes the paused contract.\n   * If `sendParam.from` or `kip17.options.from` were given, it should be a pauser with PauserRole.\n   *\n   * @example\n   * const receipt = await kip17.unpause({ from: '0x{address in hex}' })\n   *\n   * @param {string} spender The address of the account to use on behalf of owner for the amount to be set in allowance.\n   * @param {BigNumber|string|number} amount The amount of tokens the spender allows to use on behalf of the owner.\n   * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async unpause(sendParam = {}) {\n    const executableObj = this.methods.unpause();\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Adds an account as a pauser that has the right to suspend the contract.\n   * If `sendParam.from` or `kip17.options.from` were given, it should be a pauser with PauserRole.\n   *\n   * @example\n   * const receipt = await kip17.addPauser('0x{address in hex}', { from: '0x{address in hex}' })\n   *\n   * @param {string} account The address of account to add as pauser.\n   * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async addPauser(account, sendParam = {}) {\n    const executableObj = this.methods.addPauser(account);\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Renounces the right to pause the contract. Only a pauser address can renounce its own pausing right.\n   * If `sendParam.from` or `kip17.options.from` were given, it should be a pauser with PauserRole.\n   *\n   * @example\n   * const receipt = await kip17.renouncePauser({ from: '0x{address in hex}' })\n   *\n   * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async renouncePauser(sendParam = {}) {\n    const executableObj = this.methods.renouncePauser();\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n\n}\n/**\n * The byte code of the KIP-17 token contract.\n *\n * @example\n * caver.kct.kip17.byteCode\n *\n * @static\n * @type {string}\n */\n\n\nKIP17.byteCode = kip17ByteCode;\n/**\n * The abi of the KIP-17 token contract.\n *\n * @example\n * caver.kct.kip17.abi\n *\n * @static\n * @type {Array.<object>}\n */\n\nKIP17.abi = kip17JsonInterface;\nmodule.exports = KIP17;","map":null,"metadata":{},"sourceType":"script"}