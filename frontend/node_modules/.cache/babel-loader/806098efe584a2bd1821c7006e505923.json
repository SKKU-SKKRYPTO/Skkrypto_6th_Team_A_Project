{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst utils = require('../../caver-utils');\n\nconst AccountKeyDecoder = require('./accountKey/accountKeyDecoder');\n\nconst AccountKeyLegacy = require('./accountKey/accountKeyLegacy');\n\nconst AccountKeyPublic = require('./accountKey/accountKeyPublic');\n\nconst AccountKeyFail = require('./accountKey/accountKeyFail');\n\nconst AccountKeyWeightedMultiSig = require('./accountKey/accountKeyWeightedMultiSig');\n\nconst AccountKeyRoleBased = require('./accountKey/accountKeyRoleBased');\n\nconst WeightedMultiSigOptions = require('./accountKey/weightedMultiSigOptions');\n\nconst WeightedPublicKey = require('./accountKey/weightedPublicKey');\n\nconst _require = require('../../caver-wallet/src/keyring/keyringHelper'),\n      isMultipleKeysFormat = _require.isMultipleKeysFormat,\n      isRoleBasedKeysFormat = _require.isRoleBasedKeysFormat;\n\nfunction isAccountKeyInstance(accountKey) {\n  if (!(accountKey instanceof AccountKeyLegacy) && !(accountKey instanceof AccountKeyPublic) && !(accountKey instanceof AccountKeyFail) && !(accountKey instanceof AccountKeyWeightedMultiSig) && !(accountKey instanceof AccountKeyRoleBased)) return false;\n  return true;\n}\n/**\n * Representing an Account which includes information for account update.\n *\n * @class\n * @hideconstructor\n */\n\n\nclass Account {\n  /**\n   * Creates an Account instance with an address and an accountKey.\n   *\n   * If `accountKey` is a public key string, an `Account` instance with `AccountKeyPublic` as accountKey is created.\n   *\n   * If `accountKey` is an array containing public key strings, an `Account` instance with `AccountKeyWeightedMultiSig` as accountKey is created.\n   * If options are not defined as the last parameter, it is created using a default option with a threshold of 1 and a weight of 1 for each key.\n   *\n   * If `accountKey` is an array containing accountKeys that are used for each role, an `Account` instance with `AccountKeyRoleBased` is created.\n   * Options must be defined for each role with WeightedMultiSigOptions (or object).\n   * If options are not defined, the default option is used for roles that use multiple public keys.\n   *\n   * @example\n   * // Create an account instance with AccountKeyPublic\n   * caver.account.create('0x{address in hex}', '0x{public key}')\n   *\n   * // Create an account instance with AccountKeyWeightedMultiSig\n   * caver.account.create('0x{address in hex}', ['0x{public key}', '0x{public key}'], { threshold: 1, weight: [1, 1] })\n   *\n   * // Create an account instance with AccountKeyWeightedMultiSig (use the WeightedMultiSigOptions)\n   * const options = new caver.account.weightedMultiSigOptions(1, [1, 1])\n   * caver.account.create('0x{address in hex}', ['0x{public key}', '0x{public key}'], options)\n   *\n   * // Create an account instance with AccountKeyRoleBased\n   * caver.account.create('0x{address in hex}', [['0x{public key}'], ['0x{public key}', '0x{public key}'], ['0x{public key}']], [{}, { threshold: 1, weight: [1, 1] }, {}])\n   *\n   * // Create an account instance with AccountKeyRoleBased (use the WeightedMultiSigOptions)\n   * const options = [\n   *      {},\n   *      new caver.account.weightedMultiSigOptions(1, [1, 1]),\n   *      {}\n   * ]\n   * caver.account.create('0x{address in hex}', [['0x{public key}'], ['0x{public key}', '0x{public key}'], ['0x{public key}']], options)\n   *\n   * @param {string} address The address of Account.\n   * @param {string|Array.<string>|Array.<Array.<string>>} accountKey The accountKey value of Account. Depending on this, Account's accountKey will be AccountKeyLegacy / AccountKeyPublic / AccountKeyFail / AccountKeyWeightedMultiSig / AccountKeyRoleBased.\n   * @param {object|Array.<object>|WeightedMultiSigOptions|Array.<WeightedMultiSigOptions>} [options] The options that includes 'threshold' and 'weight'. This is only necessary if AccountKeyWeightedMultiSig or AccountKeyRoleBased.\n   * @return {Account}\n   */\n  static create(address, accountKey, options) {\n    if (_.isString(accountKey)) {\n      if (utils.isValidPublicKey(accountKey)) {\n        return Account.createWithAccountKeyPublic(address, accountKey);\n      }\n\n      return Account.createFromRLPEncoding(address, accountKey);\n    }\n\n    if (isMultipleKeysFormat(accountKey)) {\n      if (accountKey.length === 0) throw new Error(\"Empty accountKey array.\");\n      return Account.createWithAccountKeyWeightedMultiSig(address, accountKey, options);\n    }\n\n    if (isRoleBasedKeysFormat(accountKey)) {\n      return Account.createWithAccountKeyRoleBased(address, accountKey, options);\n    }\n\n    throw new Error(\"Unsupported accountKey type: \".concat(typeof accountKey));\n  }\n  /**\n   * Creates an Account instance from RLP-encoded account key.\n   *\n   * @example\n   * caver.account.createFromRLPEncoding('0x{address in hex}', '0x04f84...')\n   *\n   * @param {string} address The address of Account.\n   * @param {string} rlpEncodedKey The RLP-encoded accountKey string.\n   * @return {Account}\n   */\n\n\n  static createFromRLPEncoding(address, rlpEncodedKey) {\n    const accountKey = AccountKeyDecoder.decode(rlpEncodedKey);\n    return new Account(address, accountKey);\n  }\n  /**\n   * Creates an Account instance which has AccountKeyLegacy as an accountKey.\n   *\n   * @example\n   * caver.account.createWithAccountKeyLegacy('0x{address in hex}')\n   *\n   * @param {string} address The address of Account.\n   * @return {Account}\n   */\n\n\n  static createWithAccountKeyLegacy(address) {\n    return new Account(address, new AccountKeyLegacy());\n  }\n  /**\n   * Creates an Account instance which has AccountKeyPublic as an accountKey.\n   *\n   * @example\n   * caver.account.createWithAccountKeyPublic('0x{address in hex}', '0xb5a9a...')\n   *\n   * @param {string} address The address of Account.\n   * @param {string} publicKey The public key string.\n   * @return {Account}\n   */\n\n\n  static createWithAccountKeyPublic(address, publicKey) {\n    return new Account(address, new AccountKeyPublic(publicKey));\n  }\n  /**\n   * Creates an Account instance which has AccountKeyFail as an accountKey.\n   *\n   * @example\n   * caver.account.createWithAccountKeyFail('0x{address in hex}')\n   *\n   * @param {string} address The address of Account.\n   * @return {Account}\n   */\n\n\n  static createWithAccountKeyFail(address) {\n    return new Account(address, new AccountKeyFail());\n  }\n  /**\n   * Creates an Account instance which has AccountKeyWeightedMultiSig as an accountKey.\n   * If options are not defined as the last parameter, it is created using a default option with a threshold of 1 and a weight of 1 for each key.\n   *\n   * @example\n   * // create an Account instance without options\n   * caver.account.createWithAccountKeyWeightedMultiSig('0x{address in hex}', ['0xb5a9a...', '0xfe4b8...'])\n   *\n   * // create an Account instance with options\n   * const options = { threshold: 2, weight: [1,1] }\n   * caver.account.createWithAccountKeyWeightedMultiSig('0x{address in hex}', ['0xb5a9a...', '0xfe4b8...'], options)\n   *\n   * // create an Account instance with options (use the WeightedMultiSigOptions)\n   * const options = new caver.account.weightedMultiSigOptions(2, [1, 1])\n   * caver.account.createWithAccountKeyWeightedMultiSig('0x{address in hex}', ['0xb5a9a...', '0xfe4b8...'], options)\n   *\n   * @param {string} address The address of Account.\n   * @param {Array.<string>} publicKeyArray The array that includes multiple public key strings.\n   * @param {object|WeightedMultiSigOptions} [options] The object that includes threshold and weight array.\n   * @return {Account}\n   */\n\n\n  static createWithAccountKeyWeightedMultiSig(address, publicKeyArray, options) {\n    if (!utils.isAddress(address)) throw new Error(\"Invalid address: \".concat(address));\n    if (!_.isArray(publicKeyArray)) throw new Error(\"Invalid public key array: \".concat(publicKeyArray));\n    return new Account(address, AccountKeyWeightedMultiSig.fromPublicKeysAndOptions(publicKeyArray, options));\n  }\n  /**\n   * Creates an Account instance which has AccountKeyRoleBased as an accountKey.\n   * If options are not defined, the default option is used for roles that use multiple public keys.\n   *\n   * @example\n   * // create an Account instance without options\n   * const publicKeys = [\n   *     ['0x034f1...', '0xfe4b8...'],\n   *     ['0xb5a9a...'],\n   *     ['0x034f1...', '0xb5a9a...']\n   * ]\n   * caver.account.createWithAccountKeyRoleBased('0x{address in hex}', publicKeys)\n   *\n   * // create an Account instance with options\n   * const options = [\n   *     { threshold: 2, weight: [1, 1] },\n   *     {},\n   *     { threshold: 3, weight: [1, 2] }\n   * ]\n   * caver.account.createWithAccountKeyRoleBased('0x{address in hex}', publicKeys, options)\n   *\n   * // create an Account instance with options (use the WeightedMultiSigOptions)\n   * const options = [\n   *     new caver.account.weightedMultiSigOptions(2, [1, 1]),\n   *     new caver.account.weightedMultiSigOptions(),\n   *     new caver.account.weightedMultiSigOptions(3, [1, 2])\n   * ]\n   * caver.account.createWithAccountKeyRoleBased('0x{address in hex}', publicKeys, options)\n   *\n   * @param {string} address The address of Account.\n   * @param {Array.<Array.<string>>} roledBasedPublicKeyArray A two-dimensional array containing arrays of public key strings for each role.\n   * @param {Array.<object|WeightedMultiSigOptions>} [options] An array that contains objects with threshold and weight array defined for each role.\n   * @return {Account}\n   */\n\n\n  static createWithAccountKeyRoleBased(address, roledBasedPublicKeyArray, options) {\n    return new Account(address, AccountKeyRoleBased.fromRoleBasedPublicKeysAndOptions(roledBasedPublicKeyArray, options));\n  }\n  /**\n   * The account key types which are used in the `caver.account` package.\n   *\n   * @typedef {AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig|AccountKeyRoleBased} Account.AccountKey\n   */\n\n  /**\n   * Creates an account. It is recommended to use [caver.account.create]{@link Account#create} rather than using the constructor directly.\n   *\n   * @example\n   * const accountKey = new caver.account.accountKey.accountKeyLegacy()\n   * const account = new caver.account('0x{address in hex}', accountKey)\n   *\n   * @constructor\n   * @hideconstructor\n   * @param {string} address - The address of account.\n   * @param {Account.AccountKey} accountKey - The accountKey of account.\n   */\n\n\n  constructor(address, accountKey) {\n    this.address = address;\n    this.accountKey = accountKey;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get address() {\n    return this._address;\n  }\n\n  set address(addressInput) {\n    if (!utils.isAddress(addressInput)) throw new Error(\"Invalid address : \".concat(addressInput));\n    this._address = utils.addHexPrefix(addressInput);\n  }\n  /**\n   * @type {Account.AccountKey}\n   */\n\n\n  get accountKey() {\n    return this._accountKey;\n  }\n\n  set accountKey(accountKey) {\n    if (!isAccountKeyInstance(accountKey)) throw new Error(\"Invalid accountKey. accountKey should be an instance of AccountKeyLegacy, AccountKeyPublic, AccountKeyFail, AccountKeyWeightedMultiSig or AccountKeyRoleBased\");\n    this._accountKey = accountKey;\n  }\n  /**\n   * returns RLP-encoded account key string.\n   *\n   * @example\n   * const encodedAccountKey = account.getRLPEncodingAccountKey()\n   *\n   * @return {string}\n   */\n\n\n  getRLPEncodingAccountKey() {\n    return this._accountKey.getRLPEncoding();\n  }\n\n}\n/**\n * @example\n * caver.account.weightedMultiSigOptions\n *\n * @type {typeof WeightedMultiSigOptions}\n * */\n\n\nAccount.weightedMultiSigOptions = WeightedMultiSigOptions;\n/**\n * A module that provides functions for accountKey.\n *\n * @typedef {object} AccountKeyModule\n * @property {function} decode - A function to decode the accountKey. Please refer to {@link AccountKeyDecoder.decode|caver.account.accountKey.decode}.\n * @property {typeof AccountKeyLegacy} accountKeyLegacy - Class representing accountKeyLegacy.\n * @property {typeof AccountKeyPublic} accountKeyPublic - Class representing AccountKeyPublic.\n * @property {typeof AccountKeyFail} accountKeyFail - Class representing AccountKeyFail.\n * @property {typeof AccountKeyWeightedMultiSig} accountKeyWeightedMultiSig - Class representing AccountKeyWeightedMultiSig.\n * @property {typeof AccountKeyRoleBased} accountKeyRoleBased - Class representing AccountKeyRoleBased.\n * @property {typeof WeightedPublicKey} weightedPublicKey - Class representing WeightedPublicKey.\n */\n\n/**\n * @example\n * caver.account.accountKey\n * caver.account.accountKey.decode('0x{encoded account key}')\n * caver.account.accountKey.accountKeyLegacy\n * caver.account.accountKey.accountKeyPublic\n * caver.account.accountKey.accountKeyFail\n * caver.account.accountKey.accountKeyWeightedMultiSig\n * caver.account.accountKey.accountKeyRoleBased\n * caver.account.accountKey.weightedPublicKey\n *\n * @type {AccountKeyModule}\n * */\n\nAccount.accountKey = {\n  decode: AccountKeyDecoder.decode,\n  accountKeyLegacy: AccountKeyLegacy,\n  accountKeyPublic: AccountKeyPublic,\n  accountKeyFail: AccountKeyFail,\n  accountKeyWeightedMultiSig: AccountKeyWeightedMultiSig,\n  accountKeyRoleBased: AccountKeyRoleBased,\n  weightedPublicKey: WeightedPublicKey\n};\nmodule.exports = Account;","map":null,"metadata":{},"sourceType":"script"}