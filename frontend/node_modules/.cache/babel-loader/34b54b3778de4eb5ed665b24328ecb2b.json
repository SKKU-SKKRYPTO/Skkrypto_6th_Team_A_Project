{"ast":null,"code":"/*\n    Copyright 2021 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst Contract = require('../../caver-contract');\n\nconst _require = require('./kctHelper'),\n      kip13JsonInterface = _require.kip13JsonInterface,\n      interfaceIds = _require.interfaceIds;\n\nconst _require2 = require('../../caver-utils'),\n      isAddress = _require2.isAddress;\n/**\n * The KIP13 class allows you to easily check whether a SmartContract implements the KIP-13 standard.\n * It also provides the ability to query whether an interface id is implemented as a parameter.\n *\n * @class\n */\n\n\nclass KIP13 extends Contract {\n  /**\n   * Checks if the contract implements the KIP-13 standard.\n   *\n   * @example\n   * const isImplemented = await caver.kct.kip13.isImplementedKIP13Interface('0x{address in hex}')\n   *\n   * @param {string} contractAddress The address of the contract to check.\n   * @return {Promise<boolean>}\n   */\n  static async isImplementedKIP13Interface(contractAddress) {\n    const kip13 = new KIP13(contractAddress);\n    const isTrue = await kip13.sendQuery(interfaceIds.preCondition.true);\n    const isFalse = await kip13.sendQuery(interfaceIds.preCondition.false);\n    return isTrue && !isFalse;\n  }\n  /**\n   * KIP13 class represents the KIP-13 contract.\n   *\n   * @example\n   * const kip13 = new caver.kct.kip13('0x{address in hex}')\n   *\n   * @constructor\n   * @param {string} [contractAddress] - The smart contract address.\n   * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-13.\n   */\n\n\n  constructor(contractAddress, abi = kip13JsonInterface) {\n    if (contractAddress) {\n      if (_.isString(contractAddress)) {\n        if (!isAddress(contractAddress)) throw new Error(\"Invalid contract address \".concat(contractAddress));\n      } else {\n        abi = contractAddress;\n        contractAddress = undefined;\n      }\n    }\n\n    super(abi, contractAddress);\n  }\n  /**\n   * Sends query to check whether the interface is supported or not.\n   * Using `supportsInterface` method supported in the each KCT class is recommended to use instead of the `kip13.sendQuery`.\n   *\n   * @example\n   * const isImplemented = await kip13.sendQuery('0x{interface id}')\n   *\n   * @param {string} interfaceId The interface id to check.\n   * @return {Promise<boolean>}\n   */\n\n\n  async sendQuery(interfaceId) {\n    const supported = await this.methods.supportsInterface(interfaceId).call();\n    return supported;\n  }\n\n}\n\nmodule.exports = KIP13;","map":null,"metadata":{},"sourceType":"script"}