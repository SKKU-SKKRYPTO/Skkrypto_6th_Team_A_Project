{"ast":null,"code":"/*\n    Copyright 2021 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst BigNumber = require('bignumber.js');\n\nconst Contract = require('../../caver-contract');\n\nconst _require = require('./kctHelper'),\n      kip37JsonInterface = _require.kip37JsonInterface,\n      kip37ByteCode = _require.kip37ByteCode,\n      determineSendParams = _require.determineSendParams,\n      formatParamForUint256 = _require.formatParamForUint256,\n      validateDeployParameterForKIP37 = _require.validateDeployParameterForKIP37,\n      interfaceIds = _require.interfaceIds;\n\nconst _require2 = require('../../caver-utils'),\n      isAddress = _require2.isAddress,\n      toBuffer = _require2.toBuffer,\n      isHexStrict = _require2.isHexStrict,\n      toHex = _require2.toHex,\n      stripHexPrefix = _require2.stripHexPrefix,\n      leftPad = _require2.leftPad;\n\nconst KIP13 = require('./kip13');\n/**\n * The KIP37 class that helps you easily handle a smart contract that implements KIP-37 as a JavaScript object on the Klaytn blockchain platform (Klaytn).\n * @hideconstructor\n * @class\n */\n\n\nclass KIP37 extends Contract {\n  /**\n   * Creates a new KIP37 instance with its bound methods and events.\n   *\n   * @example\n   * const kip37 = caver.kct.kip37.create('0x{address in hex}')\n   *\n   * @param {string} tokenAddress - The KIP-37 token contract address.\n   * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-37.\n   * @return {KIP37}\n   */\n  static create(tokenAddress, abi) {\n    return new KIP37(tokenAddress, abi);\n  }\n  /**\n   * An object that defines the parameters required to deploy the KIP-37 contract.\n   *\n   * @typedef {object} KIP37.KIP37DeployParams\n   * @property {string} uri - The URI for all token types, by relying on the {@link http://kips.klaytn.com/KIPs/kip-37#metadata|token type ID substitution mechanism}.\n   */\n\n  /**\n   * Deploys a KIP-37 token contract to Klaytn network.\n   *\n   * By default, it returns a KIP37 instance when the deployment is finished.\n   * If you define a custom function in the `contractDeployFormatter` field in {@link Contract.SendOptions|SendOptions}, you can control return type.\n   *\n   * @example\n   * const tokenInfo = { uri: 'uri string' }\n   *\n   * // Below example will use `caver.wallet`.\n   * const deployed = await caver.kct.kip37.deploy(tokenInfo, '0x{deployer address}')\n   *\n   * // Use sendOptions instead of deployer address.\n   * const sendOptions = { from: '0x{deployer address}', feeDelegation: true, feePayer: '0x{fee payer address}' }\n   * const deployed = await caver.kct.kip37.deploy(tokenInfo, sendOptions)\n   *\n   * // If you want to use your own wallet that implements the 'IWallet' interface, pass it into the last parameter.\n   * const deployed = await caver.kct.kip37.deploy(tokenInfo, '0x{deployer address}', wallet)\n   *\n   * @param {KIP37.KIP37DeployParams} tokenInfo The object that defines the uri to deploy.\n   * @param {Contract.SendOptions|string} sendOptions An object holding parameters that are required for sending a transaction.\n   * @param {IWallet} [wallet] The wallet instance to sign and send a transaction.\n   * @return {Promise<*>}\n   */\n\n\n  static deploy(tokenInfo, sendOptions, wallet) {\n    validateDeployParameterForKIP37(tokenInfo);\n    const uri = tokenInfo.uri;\n    const kip37 = new KIP37();\n    if (wallet !== undefined) kip37.setWallet(wallet); // If sendOptions is string type, sendOptions means deployer's address\n\n    if (_.isString(sendOptions)) sendOptions = {\n      from: sendOptions,\n      gas: 7000000,\n      value: 0\n    };\n    sendOptions.gas = sendOptions.gas !== undefined ? sendOptions.gas : 7000000;\n    return kip37.deploy({\n      data: kip37ByteCode,\n      arguments: [uri]\n    }).send(sendOptions);\n  }\n  /**\n   * An object that defines the parameters required to deploy the KIP-37 contract.\n   *\n   * @typedef {object} KIP37.KIP37DetectedObject\n   * @property {boolean} IKIP37 - Whether to implement `IKIP37` interface.\n   * @property {boolean} IKIP37Metadata - Whether to implement `IKIP37Metadata` interface.\n   * @property {boolean} IKIP37Mintable - Whether to implement `IKIP37Mintable` interface.\n   * @property {boolean} IKIP37Burnable - Whether to implement `IKIP37Burnable` interface.\n   * @property {boolean} IKIP37Pausable - Whether to implement `IKIP37Pausable` interface.\n   */\n\n  /**\n   * Returns the information of the interface implemented by the token contract.\n   *\n   * @example\n   * const detected = await caver.kct.kip37.detectInterface('0x{address in hex}')\n   *\n   * @param {string} contractAddress The address of the KIP-37 token contract to detect.\n   * @return {Promise<KIP37.KIP37DetectedObject>}\n   */\n\n\n  static detectInterface(contractAddress) {\n    const kip37 = new KIP37(contractAddress);\n    return kip37.detectInterface();\n  }\n\n  constructor(tokenAddress, abi = kip37JsonInterface) {\n    if (tokenAddress) {\n      if (_.isString(tokenAddress)) {\n        if (!isAddress(tokenAddress)) throw new Error(\"Invalid token address \".concat(tokenAddress));\n      } else {\n        abi = tokenAddress;\n        tokenAddress = undefined;\n      }\n    }\n\n    super(abi, tokenAddress);\n    this.setWallet(KIP37.wallet);\n  }\n  /**\n   * Clones the current KIP37 instance.\n   *\n   * @example\n   * const cloned = kip37.clone()\n   * const cloned = kip37.clone('0x{new kip7 address}')\n   *\n   * @param {string} [tokenAddress] The address of the token contract.\n   * @return {KIP37}\n   */\n\n\n  clone(tokenAddress = this.options.address) {\n    const cloned = new this.constructor(tokenAddress, this.options.jsonInterface);\n    cloned.setWallet(this._wallet);\n    return cloned;\n  }\n  /**\n   * Returns the information of the interface implemented by the token contract.\n   *\n   * @example\n   * const detected = await kip37.detectInterface()\n   *\n   * @return {Promise<KIP37.KIP37DetectedObject>}\n   */\n\n\n  async detectInterface() {\n    const detected = {\n      IKIP37: false,\n      IKIP37Metadata: false,\n      IKIP37Mintable: false,\n      IKIP37Burnable: false,\n      IKIP37Pausable: false\n    };\n    const notSupportedMsg = \"This contract does not support KIP-13.\";\n    const contractAddress = this._address;\n\n    try {\n      const isSupported = await KIP13.isImplementedKIP13Interface(contractAddress);\n      if (isSupported !== true) throw new Error(notSupportedMsg); // Since there is an extension that has the same interface id even though it is a different KCT,\n      // it must be checked first whether the contract is a KIP-37 contract.\n\n      detected.IKIP37 = await this.supportsInterface(interfaceIds.kip37.IKIP37);\n      if (detected.IKIP37 === false) return detected;\n      await Promise.all(Object.keys(interfaceIds.kip37).map(async interfaceName => {\n        if (interfaceIds.kip37[interfaceName] !== interfaceIds.kip37.IKIP37) detected[interfaceName] = await this.supportsInterface(interfaceIds.kip37[interfaceName]);\n      }));\n      return detected;\n    } catch (e) {\n      throw new Error(notSupportedMsg);\n    }\n  }\n  /**\n   * Returns `true` if this contract implements the interface defined by `interfaceId`.\n   *\n   * @example\n   * const supported = await kip37.supportsInterface('0x6433ca1f')\n   *\n   * @param {string} interfaceId The interface id to check.\n   * @return {Promise<boolean>}\n   */\n\n\n  async supportsInterface(interfaceId) {\n    const isSupported = await this.methods.supportsInterface(interfaceId).call();\n    return isSupported;\n  }\n  /**\n   * Returns distinct Uniform Resource Identifier (URI) of the given token.\n   * If the string {id} exists in any URI, this function will replace this with the actual token ID in hexadecimal form.\n   * Please refer to {@link http://kips.klaytn.com/KIPs/kip-37#metadata|KIP-34 Metadata}.\n   *\n   * @example\n   * const uri = await kip37.uri('0x0')\n   *\n   * @param {BigNumber|string|number} id The token id to get uri.\n   * @return {Promise<string>}\n   */\n\n\n  async uri(id) {\n    let uri = await this.methods.uri(formatParamForUint256(id)).call(); // Replace {id} to token id in hexadecimal form.\n\n    if (uri.includes('{id}')) {\n      let tokenIdInHex = stripHexPrefix(toHex(id));\n      tokenIdInHex = leftPad(tokenIdInHex, 64, '0');\n      uri = uri.replace('{id}', tokenIdInHex);\n    }\n\n    return uri;\n  }\n  /**\n   * Returns the total token supply of the specific token.\n   *\n   * @example\n   * const totalSupply = await kip37.totalSupply(0)\n   *\n   * @param {BigNumber|string|number} id The token id to see the total supply.\n   * @return {Promise<BigNumber>}\n   */\n\n\n  async totalSupply(id) {\n    const totalSupply = await this.methods.totalSupply(formatParamForUint256(id)).call();\n    return new BigNumber(totalSupply);\n  }\n  /**\n   * Returns the amount of tokens of token type `id` owned by `account`.\n   *\n   * @example\n   * const balance = await kip37.balanceOf('0x{address in hex}', 0)\n   *\n   * @param {string} account The address of the account for which you want to see balance.\n   * @param {BigNumber|string|number} id The token id to see balance.\n   * @return {Promise<BigNumber>}\n   */\n\n\n  async balanceOf(account, id) {\n    const balance = await this.methods.balanceOf(account, formatParamForUint256(id)).call();\n    return new BigNumber(balance);\n  }\n  /**\n   * Returns the balance of multiple account/token pairs.\n   * `balanceOfBatch` is a batch operation of {@link balanceOf}, and the length of arrays with `accounts` and `ids` must be the same.\n   *\n   * @param {Array.<string>} accounts The address of the accounts for which you want to see balance.\n   * @param {Array.<BigNumber|string|number>} ids An array of ids of token you want to see balance.\n   * @return {Promise<Array.<BigNumber>>}\n   */\n\n\n  async balanceOfBatch(accounts, ids) {\n    if (ids.length !== accounts.length) throw new Error(\"ids and accounts must have the same length.\");\n    const formattedTokenIds = [];\n\n    for (let i = 0; i < ids.length; i++) {\n      formattedTokenIds.push(formatParamForUint256(ids[i]));\n    }\n\n    const balances = await this.methods.balanceOfBatch(accounts, formattedTokenIds).call();\n    const ret = [];\n\n    for (const bal of balances) {\n      ret.push(new BigNumber(bal));\n    }\n\n    return ret;\n  }\n  /**\n   * Queries the approval status of an operator for a given owner. Returns true if an operator is approved by a given owner.\n   *\n   * @example\n   * const isApprovedForAll = await kip37.isApprovedForAll('0x{address in hex}', '0x{address in hex}')\n   *\n   * @param {string} owner The address of the owner.\n   * @param {string} operator The address of the operator.\n   * @return {Promise<boolean>}\n   */\n\n\n  async isApprovedForAll(owner, operator) {\n    const isApprovedForAll = await this.methods.isApprovedForAll(owner, operator).call();\n    return isApprovedForAll;\n  }\n  /**\n   * Returns whether or not the token contract's transaction (or specific token) is paused.\n   *\n   * If `id` parameter is not defined, return whether the token contract's transaction is paused.\n   * If `id` parameter is defined, return whether the specific token is paused.\n   *\n   * @example\n   * // without token id parameter\n   * const isPaused = await kip37.paused()\n   * // with token id parameter\n   * const isPaused = await kip37.paused(0)\n   *\n   * @param {BigNumber|string|number} [id] The token id to check wether paused or not. If this parameter is omitted, the `paused` function return whether the contract is in paused state.\n   * @return {Promise<boolean>}\n   */\n\n\n  async paused(id) {\n    const callObject = id !== undefined ? this.methods.paused(formatParamForUint256(id)) : this.methods.paused();\n    const isPaused = await callObject.call();\n    return isPaused;\n  }\n  /**\n   * Returns `true` if the given account is a pauser who can suspend transferring tokens.\n   *\n   * @example\n   * const isPauser = await kip37.isPauser('0x{address in hex}')\n   *\n   * @param {string} account The address of the account to be checked for having the right to suspend transferring tokens.\n   * @return {Promise<boolean>}\n   */\n\n\n  async isPauser(account) {\n    const isPauser = await this.methods.isPauser(account).call();\n    return isPauser;\n  }\n  /**\n   * Returns `true` if the given account is a minter who can issue new KIP37 tokens.\n   *\n   * @example\n   * const isMinter = await kip37.isMinter('0x{address in hex}')\n   *\n   * @param {string} account The address of the account to be checked for having the minting right.\n   * @return {Promise<boolean>}\n   */\n\n\n  async isMinter(account) {\n    const isMinter = await this.methods.isMinter(account).call();\n    return isMinter;\n  }\n  /**\n   * create creates token and assigns them to account, increasing the total supply.\n   *\n   * @example\n   * // Send via a sendParam object with the from field given\n   * const receipt = await kip37.create(2, '1000000000000000000', { from: '0x{address in hex}' })\n   *\n   * @param {BigNumber|string|number} id The token id to create.\n   * @param {BigNumber|string|number} initialSupply The amount of tokens being minted.\n   * @param {string} [uri] The token URI of the created token.\n   * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\n   */\n\n\n  async create(id, initialSupply, uri, sendParam = {}) {\n    if (uri && _.isObject(uri)) {\n      if (uri.gas !== undefined || uri.from !== undefined) {\n        if (Object.keys(sendParam).length > 0) throw new Error(\"Invalid parameters\");\n        sendParam = uri;\n        uri = '';\n      }\n    }\n\n    const executableObj = this.methods.create(formatParamForUint256(id), formatParamForUint256(initialSupply), uri);\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Approves the given operator, or disallow the given operator, to transfer all tokens of the owner.\n   * An operator is allowed to transfer all tokens of the sender on their behalf.\n   *\n   * @example\n   * const receipt = await kip37.setApprovalForAll('0x{address in hex}', true, { from: '0x{address in hex}' })\n   *\n   * @param {string} operator The address of an account to be approved/prohibited to transfer the owner's all tokens.\n   * @param {boolean} approved This operator will be approved if `true`. The operator will be disallowed if `false`.\n   * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\n   */\n\n\n  async setApprovalForAll(operator, approved, sendParam = {}) {\n    const executableObj = this.methods.setApprovalForAll(operator, approved);\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Safely transfers the given `amount` tokens of specific token type `id` from `from` to the `recipient`.\n   *\n   * The address who was approved to send the owner's token (the operator) or the token owner itself is expected to execute this token transferring transaction.\n   * Thus, the approved one or the token owner should be the sender of this transaction whose address must be given at `sendParam.from` or `kip37.options.from`.\n   * Without `sendParam.from` nor `kip37.options.from` being provided, an error would occur.\n   *\n   * If the `recipient` was a contract address, it should implement `IKIP37Receiver.onKIP37Received`. Otherwise, the transfer is reverted.\n   *\n   * @example\n   * const receipt = await kip37.safeTransferFrom('0x{address in hex}', '0x{address in hex}', 2, 10000, { from: '0x{address in hex}' })\n   *\n   * @param {string} from The address of the account that owns the token to be sent with allowance mechanism.\n   * @param {string} to The address of the account to receive the token.\n   * @param {BigNumber|string|number} id The token id to transfer.\n   * @param {BigNumber|string|number} amount The amount of token you want to transfer.\n   * @param {Buffer|string|number} [data] (optional) The data to send along with the call.\n   * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\n   */\n\n\n  async safeTransferFrom(from, to, id, amount, data, sendParam = {}) {\n    if (data && _.isObject(data)) {\n      if (data.gas !== undefined || data.from !== undefined) {\n        if (Object.keys(sendParam).length > 0) throw new Error(\"Invalid parameters\");\n        sendParam = data;\n        data = Buffer.from('');\n      }\n    }\n\n    if (data && !_.isBuffer(data)) {\n      if (_.isString(data) && !isHexStrict(data)) data = toHex(data);\n      data = toBuffer(data);\n    }\n\n    const executableObj = this.methods.safeTransferFrom(from, to, formatParamForUint256(id), formatParamForUint256(amount), data);\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Safely batch transfers of multiple token ids and values from `from` to the `recipient`.\n   *\n   * The address who was approved to send the owner's token (the operator) or the token owner itself is expected to execute this token transferring transaction.\n   * Thus, the approved one or the token owner should be the sender of this transaction whose address must be given at `sendParam.from` or `kip37.options.from`.\n   * Without `sendParam.from` nor `kip37.options.from` being provided, an error would occur.\n   *\n   * If the `recipient` was a contract address, it should implement `IKIP37Receiver.onKIP37Received`. Otherwise, the transfer is reverted.\n   *\n   * @example\n   * const receipt = await kip37.safeBatchTransferFrom('0x{address in hex}', '0x{address in hex}', [1, 2], [10, 1000], { from: '0x{address in hex}' })\n   *\n   * @param {string} from The address of the account that owns the token to be sent with allowance mechanism.\n   * @param {string} recipient The address of the account to receive the token.\n   * @param {Array.<BigNumber|string|number>} ids An array of the token ids to transfer.\n   * @param {Array.<BigNumber|string|number>} amounts An array of the token amounts you want to transfer.\n   * @param {Buffer|string|number} [data] (optional) The data to send along with the call.\n   * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\n   */\n\n\n  async safeBatchTransferFrom(from, recipient, ids, amounts, data, sendParam = {}) {\n    if (data && _.isObject(data)) {\n      if (data.gas !== undefined || data.from !== undefined) {\n        if (Object.keys(sendParam).length > 0) throw new Error(\"Invalid parameters\");\n        sendParam = data;\n        data = Buffer.from('');\n      }\n    }\n\n    if (data && !_.isBuffer(data)) {\n      if (_.isString(data) && !isHexStrict(data)) data = toHex(data);\n      data = toBuffer(data);\n    }\n\n    if (ids.length !== amounts.length) throw new Error(\"ids and amounts must have the same length.\");\n    const formattedTokenIds = [];\n    const formattedTokenAmounts = [];\n\n    for (let i = 0; i < ids.length; i++) {\n      formattedTokenIds.push(formatParamForUint256(ids[i]));\n      formattedTokenAmounts.push(formatParamForUint256(amounts[i]));\n    }\n\n    const executableObj = this.methods.safeBatchTransferFrom(from, recipient, formattedTokenIds, formattedTokenAmounts, data);\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Mints the token of the specific token type `id` and assigns the tokens according to the variables `to` and `value`.\n   * The mint function allows you to mint specific token to multiple accounts at once by passing arrays `to` to and `value` as parameters.\n   *\n   * If `sendParam.from` or `kip37.options.from` were given, it should be a minter with MinterRole.\n   *\n   * @example\n   * const receipt = await kip37.mint('0x{address in hex}', 2, 1000, { from: '0x{address in hex}' })\n   *\n   * @param {string|Array.<string>} toList An address of the account or an array of addresses to which the minted token will be issued.\n   * @param {BigNumber|string|number} id The token id to mint.\n   * @param {BigNumber|string|number|Array.<BigNumber|string|number>} values The amount of token to be minted. If an array containing multiple addresses is delivered to `to` parameter, the value must be delivered in the form of an array.\n   * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\n   */\n\n\n  async mint(toList, id, values, sendParam = {}) {\n    if (_.isArray(toList) !== _.isArray(values)) throw new Error(\"If you want to minting a specific token to multiple accounts, both toList and values both must be arrays.\");\n    let executableObj;\n\n    if (_.isArray(toList)) {\n      if (toList.length !== values.length) throw new Error(\"toList and values must have the same length.\");\n      const formattedTokenValues = [];\n\n      for (const val of values) {\n        formattedTokenValues.push(formatParamForUint256(val));\n      }\n\n      executableObj = this.methods.mint(formatParamForUint256(id), toList, formattedTokenValues);\n    } else {\n      executableObj = this.methods.mint(formatParamForUint256(id), toList, formatParamForUint256(values));\n    }\n\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Mints the multiple KIP-37 tokens of the specific token types `ids` in a batch and assigns the tokens according to the variables `to` and `values`.\n   *\n   * If `sendParam.from` or `kip37.options.from` were given, it should be a minter with MinterRole.\n   *\n   * @example\n   * const receipt = await kip37.mintBatch('0x{address in hex}', [1, 2], [100, 200], { from: '0x{address in hex}' })\n   *\n   * @param {string} to An address of the account to which the minted tokens will be issued.\n   * @param {Array.<BigNumber|string|number>} ids An array of the token ids to mint.\n   * @param {Array.<BigNumber|string|number>} values An array of the token amounts to mint.\n   * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\n   */\n\n\n  async mintBatch(to, ids, values, sendParam = {}) {\n    if (ids.length !== values.length) throw new Error(\"ids and values must have the same length.\");\n    const formattedTokenIds = [];\n    const formattedTokenValues = [];\n\n    for (let i = 0; i < ids.length; i++) {\n      formattedTokenIds.push(formatParamForUint256(ids[i]));\n      formattedTokenValues.push(formatParamForUint256(values[i]));\n    }\n\n    const executableObj = this.methods.mintBatch(to, formattedTokenIds, formattedTokenValues);\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Adds an account as a minter, who are permitted to mint tokens.\n   *\n   * If `sendParam.from` or `kip37.options.from` were given, it should be a minter with MinterRole.\n   *\n   * @example\n   * const receipt = await kip37.addMinter('0x{address in hex}', { from: '0x{address in hex}' })\n   *\n   * @param {string} account The address of the account to be added as a minter.\n   * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\n   */\n\n\n  async addMinter(account, sendParam = {}) {\n    const executableObj = this.methods.addMinter(account);\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Renounces the right to mint tokens. Only a minter address can renounce the minting right.\n   *\n   * If `sendParam.from` or `kip37.options.from` were given, it should be a minter with MinterRole.\n   *\n   * @example\n   * const receipt = await kip37.renounceMinter({ from: '0x{address in hex}' })\n   *\n   * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\n   */\n\n\n  async renounceMinter(sendParam = {}) {\n    const executableObj = this.methods.renounceMinter();\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Burns specific KIP-37 tokens.\n   *\n   * The address who was approved to operate the owner's token (the operator) or the token owner itself is expected to execute this token transferring transaction.\n   * Thus, the approved one or the token owner should be the sender of this transaction whose address must be given at `sendParam.from` or `kip37.options.from`.\n   * Without `sendParam.from` nor `kip37.options.from` being provided, an error would occur.\n   *\n   * @example\n   * const receipt = await kip37.burn('0x{address in hex}', 2, 10, { from: '0x{address in hex}' })\n   *\n   * @param {string} account The address of the account that owns the token to be destroyed.\n   * @param {BigNumber|string|number} id The id of token to be destroyed.\n   * @param {BigNumber|string|number} value The amount of token to be destroyed.\n   * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async burn(account, id, value, sendParam = {}) {\n    const executableObj = this.methods.burn(account, formatParamForUint256(id), formatParamForUint256(value));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Burns the multiple KIP-37 tokens.\n   *\n   * The address who was approved to operate the owner's token (the operator) or the token owner itself is expected to execute this token transferring transaction.\n   * Thus, the approved one or the token owner should be the sender of this transaction whose address must be given at `sendParam.from` or `kip37.options.from`.\n   * Without `sendParam.from` nor `kip37.options.from` being provided, an error would occur.\n   *\n   * @example\n   * const receipt = await kip37.burnBatch('0x{address in hex}', [1, 2], [100, 200], { from: '0x{address in hex}' })\n   *\n   * @param {string} account The address of the account that owns the token to be destroyed.\n   * @param {Array.<BigNumber|string|number>} ids An array of the token ids to burn.\n   * @param {Array.<BigNumber|string|number>} values An array of the token amounts to burn.\n   * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\n   */\n\n\n  async burnBatch(account, ids, values, sendParam = {}) {\n    if (ids.length !== values.length) throw new Error(\"ids and values must have the same length.\");\n    const formattedTokenIds = [];\n    const formattedTokenValues = [];\n\n    for (let i = 0; i < ids.length; i++) {\n      formattedTokenIds.push(formatParamForUint256(ids[i]));\n      formattedTokenValues.push(formatParamForUint256(values[i]));\n    }\n\n    const executableObj = this.methods.burnBatch(account, formattedTokenIds, formattedTokenValues);\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Suspends functions related to token operation.\n   * If `id` parameter is defined, pause the specific token. Otherwise pause the token contract.\n   *\n   * If `sendParam.from` or `kip37.options.from` were given, it should be a pauser with PauserRole.\n   *\n   * @example\n   * const receipt = await kip37.pause({ from: '0x{address in hex}' })\n   *\n   * @param {BigNumber|string|number} [id] The token id to pause. If this parameter is omitted, the `pause` function pause the token contract.\n   * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\n   */\n\n\n  async pause(id, sendParam = {}) {\n    if (Object.keys(sendParam).length === 0 && _.isObject(id)) {\n      sendParam = id;\n      id = undefined;\n    }\n\n    const executableObj = id !== undefined ? this.methods.pause(formatParamForUint256(id)) : this.methods.pause();\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Resumes the paused contract or specific token.\n   * If `id` parameter is defined, unpause the specific token. Otherwise unpause the token contract.\n   *\n   * If `sendParam.from` or `kip37.options.from` were given, it should be a pauser with PauserRole.\n   *\n   * @example\n   * const receipt = await kip37.unpause({ from: '0x{address in hex}' })\n   *\n   * @param {BigNumber|string|number} [id] The token id to unpause. If this parameter is omitted, the `unpause` function unpause the token contract.\n   * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\n   */\n\n\n  async unpause(id, sendParam = {}) {\n    if (Object.keys(sendParam).length === 0 && _.isObject(id)) {\n      sendParam = id;\n      id = undefined;\n    }\n\n    const executableObj = id !== undefined ? this.methods.unpause(formatParamForUint256(id)) : this.methods.unpause();\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Adds an account as a pauser that has the right to suspend the contract.\n   *\n   * If `sendParam.from` or `kip37.options.from` were given, it should be a pauser with PauserRole.\n   *\n   * @example\n   * const receipt = await kip37.addPauser('0x{address in hex}', { from: '0x{address in hex}' })\n   *\n   * @param {string} account The address of the account to be a new pauser.\n   * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\n   */\n\n\n  async addPauser(account, sendParam = {}) {\n    const executableObj = this.methods.addPauser(account);\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Renounces the right to pause the contract. Only a pauser address can renounce the pausing right.\n   *\n   * If `sendParam.from` or `kip37.options.from` were given, it should be a pauser with PauserRole.\n   *\n   * @example\n   * const receipt = await kip37.renouncePauser({ from: '0x{address in hex}' })\n   *\n   * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\n   */\n\n\n  async renouncePauser(sendParam = {}) {\n    const executableObj = this.methods.renouncePauser();\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n\n}\n/**\n * The byte code of the KIP-37 token contract.\n *\n * @example\n * caver.kct.kip37.byteCode\n *\n * @static\n * @type {string}\n */\n\n\nKIP37.byteCode = kip37ByteCode;\n/**\n * The abi of the KIP-37 token contract.\n *\n * @example\n * caver.kct.kip37.abi\n *\n * @static\n * @type {Array.<object>}\n */\n\nKIP37.abi = kip37JsonInterface;\nmodule.exports = KIP37;","map":null,"metadata":{},"sourceType":"script"}