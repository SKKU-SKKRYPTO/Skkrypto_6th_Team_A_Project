{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst LegacyTransaction = require('./transactionTypes/legacyTransaction/legacyTransaction');\n\nconst ValueTransfer = require('./transactionTypes/valueTransfer/valueTransfer');\n\nconst FeeDelegatedValueTransfer = require('./transactionTypes/valueTransfer/feeDelegatedValueTransfer');\n\nconst FeeDelegatedValueTransferWithRatio = require('./transactionTypes/valueTransfer/feeDelegatedValueTransferWithRatio');\n\nconst ValueTransferMemo = require('./transactionTypes/valueTransferMemo/valueTransferMemo');\n\nconst FeeDelegatedValueTransferMemo = require('./transactionTypes/valueTransferMemo/feeDelegatedValueTransferMemo');\n\nconst FeeDelegatedValueTransferMemoWithRatio = require('./transactionTypes/valueTransferMemo/feeDelegatedValueTransferMemoWithRatio');\n\nconst AccountUpdate = require('./transactionTypes/accountUpdate/accountUpdate');\n\nconst FeeDelegatedAccountUpdate = require('./transactionTypes/accountUpdate/feeDelegatedAccountUpdate');\n\nconst FeeDelegatedAccountUpdateWithRatio = require('./transactionTypes/accountUpdate/feeDelegatedAccountUpdateWithRatio');\n\nconst SmartContractDeploy = require('./transactionTypes/smartContractDeploy/smartContractDeploy');\n\nconst FeeDelegatedSmartContractDeploy = require('./transactionTypes/smartContractDeploy/feeDelegatedSmartContractDeploy');\n\nconst FeeDelegatedSmartContractDeployWithRatio = require('./transactionTypes/smartContractDeploy/feeDelegatedSmartContractDeployWithRatio');\n\nconst SmartContractExecution = require('./transactionTypes/smartContractExecution/smartContractExecution');\n\nconst FeeDelegatedSmartContractExecution = require('./transactionTypes/smartContractExecution/feeDelegatedSmartContractExecution');\n\nconst FeeDelegatedSmartContractExecutionWithRatio = require('./transactionTypes/smartContractExecution/feeDelegatedSmartContractExecutionWithRatio');\n\nconst Cancel = require('./transactionTypes/cancel/cancel');\n\nconst FeeDelegatedCancel = require('./transactionTypes/cancel/feeDelegatedCancel');\n\nconst FeeDelegatedCancelWithRatio = require('./transactionTypes/cancel/feeDelegatedCancelWithRatio');\n\nconst ChainDataAnchoring = require('./transactionTypes/chainDataAnchoring/chainDataAnchoring');\n\nconst FeeDelegatedChainDataAnchoring = require('./transactionTypes/chainDataAnchoring/feeDelegatedChainDataAnchoring');\n\nconst FeeDelegatedChainDataAnchoringWithRatio = require('./transactionTypes/chainDataAnchoring/feeDelegatedChainDataAnchoringWithRatio');\n\nconst TransactionDecoder = require('./transactionDecoder/transactionDecoder');\n\nconst AbstractTransaction = require('./transactionTypes/abstractTransaction');\n\nconst _require = require('./transactionHelper/transactionHelper'),\n      TX_TYPE_STRING = _require.TX_TYPE_STRING,\n      TX_TYPE_TAG = _require.TX_TYPE_TAG;\n\nconst Account = require('../../caver-account');\n\nconst AbstractFeeDelegatedTransaction = require('./transactionTypes/abstractFeeDelegatedTransaction');\n/** @module Transaction */\n\n/**\n * @typedef {LegacyTransaction|ValueTransfer|FeeDelegatedValueTransfer|FeeDelegatedValueTransferWithRatio|ValueTransferMemo|FeeDelegatedValueTransferMemo|FeeDelegatedValueTransferMemoWithRatio|AccountUpdate|FeeDelegatedAccountUpdate|FeeDelegatedAccountUpdateWithRatio|SmartContractDeploy|FeeDelegatedSmartContractDeploy|FeeDelegatedSmartContractDeployWithRatio|SmartContractExecution|FeeDelegatedSmartContractExecution|FeeDelegatedSmartContractExecution|FeeDelegatedSmartContractExecutionWithRatio|Cancel|FeeDelegatedCancel|FeeDelegatedCancelWithRatio|ChainDataAnchoring|FeeDelegatedChainDataAnchoring|FeeDelegatedChainDataAnchoringWithRatio} module:Transaction.Transaction\n */\n\n/**\n * @typedef {FeeDelegatedValueTransfer|FeeDelegatedValueTransferWithRatio|FeeDelegatedValueTransferMemo|FeeDelegatedValueTransferMemoWithRatio|FeeDelegatedAccountUpdate|FeeDelegatedAccountUpdateWithRatio|FeeDelegatedSmartContractDeploy|FeeDelegatedSmartContractDeployWithRatio|FeeDelegatedSmartContractExecution|FeeDelegatedSmartContractExecution|FeeDelegatedSmartContractExecutionWithRatio|FeeDelegatedCancel|FeeDelegatedCancelWithRatio|FeeDelegatedChainDataAnchoring|FeeDelegatedChainDataAnchoringWithRatio} module:Transaction.FeeDelegatedTransaction\n */\n\n/**\n * Querys transaction from Klaytn and converts to a caver transaction instance.\n * If it fails to receive a transaction from Klaytn, an error is thrown.\n *\n * @example\n * const txObject = await caver.transaction.getTransactionByHash('0x{transaction hash}')\n *\n * @method getTransactionByHash\n * @param  {string} transactionHash The transaction hash string to query from Klaytn.\n * @return {Promise<AbstractTransaction>}\n */\n\n\nasync function getTransactionByHash(transactionHash) {\n  let txObject = await AbstractTransaction._klaytnCall.getTransactionByHash(transactionHash);\n  if (txObject === null) throw new Error(\"Failed to get transaction from Klaytn with '\".concat(transactionHash, \"'.\")); // AccountUpdate transaction received from Klaytn defines encodedAccountKey string in `key` field.\n  // This needs to be formatted according to the caver transaction format (`account` field).\n\n  if (txObject.key) {\n    const account = Account.createFromRLPEncoding(txObject.from, txObject.key);\n    txObject.account = account;\n    delete txObject.key;\n  }\n\n  switch (txObject.type) {\n    case 'TxTypeLegacyTransaction':\n      txObject = new LegacyTransaction(txObject);\n      break;\n\n    case 'TxTypeValueTransfer':\n      txObject = new ValueTransfer(txObject);\n      break;\n\n    case 'TxTypeFeeDelegatedValueTransfer':\n      txObject = new FeeDelegatedValueTransfer(txObject);\n      break;\n\n    case 'TxTypeFeeDelegatedValueTransferWithRatio':\n      txObject = new FeeDelegatedValueTransferWithRatio(txObject);\n      break;\n\n    case 'TxTypeValueTransferMemo':\n      txObject = new ValueTransferMemo(txObject);\n      break;\n\n    case 'TxTypeFeeDelegatedValueTransferMemo':\n      txObject = new FeeDelegatedValueTransferMemo(txObject);\n      break;\n\n    case 'TxTypeFeeDelegatedValueTransferMemoWithRatio':\n      txObject = new FeeDelegatedValueTransferMemoWithRatio(txObject);\n      break;\n\n    case 'TxTypeAccountUpdate':\n      txObject = new AccountUpdate(txObject);\n      break;\n\n    case 'TxTypeFeeDelegatedAccountUpdate':\n      txObject = new FeeDelegatedAccountUpdate(txObject);\n      break;\n\n    case 'TxTypeFeeDelegatedAccountUpdateWithRatio':\n      txObject = new FeeDelegatedAccountUpdateWithRatio(txObject);\n      break;\n\n    case 'TxTypeSmartContractDeploy':\n      txObject = new SmartContractDeploy(txObject);\n      break;\n\n    case 'TxTypeFeeDelegatedSmartContractDeploy':\n      txObject = new FeeDelegatedSmartContractDeploy(txObject);\n      break;\n\n    case 'TxTypeFeeDelegatedSmartContractDeployWithRatio':\n      txObject = new FeeDelegatedSmartContractDeployWithRatio(txObject);\n      break;\n\n    case 'TxTypeSmartContractExecution':\n      txObject = new SmartContractExecution(txObject);\n      break;\n\n    case 'TxTypeFeeDelegatedSmartContractExecution':\n      txObject = new FeeDelegatedSmartContractExecution(txObject);\n      break;\n\n    case 'TxTypeFeeDelegatedSmartContractExecutionWithRatio':\n      txObject = new FeeDelegatedSmartContractExecutionWithRatio(txObject);\n      break;\n\n    case 'TxTypeCancel':\n      txObject = new Cancel(txObject);\n      break;\n\n    case 'TxTypeFeeDelegatedCancel':\n      txObject = new FeeDelegatedCancel(txObject);\n      break;\n\n    case 'TxTypeFeeDelegatedCancelWithRatio':\n      txObject = new FeeDelegatedCancelWithRatio(txObject);\n      break;\n\n    case 'TxTypeChainDataAnchoring':\n      txObject = new ChainDataAnchoring(txObject);\n      break;\n\n    case 'TxTypeFeeDelegatedChainDataAnchoring':\n      txObject = new FeeDelegatedChainDataAnchoring(txObject);\n      break;\n\n    case 'TxTypeFeeDelegatedChainDataAnchoringWithRatio':\n      txObject = new FeeDelegatedChainDataAnchoringWithRatio(txObject);\n      break;\n  }\n\n  return txObject;\n}\n/**\n * Recovers the public key strings from `signatures` field.\n * If you want to derive an address from public key, please use `caver.utils.publicKeyToAddress`.\n *\n * @example\n * const publicKey = caver.transaction.recoverPublicKeys('0x{RLP-encoded transaction string}')\n *\n * @method recoverPublicKeys\n * @param  {string} rawTx The RLP-encoded transaction string to recover public keys from `signatures`.\n * @return {Array.<string>}\n */\n\n\nfunction recoverPublicKeys(rawTx) {\n  const tx = TransactionDecoder.decode(rawTx);\n  return tx.recoverPublicKeys();\n}\n/**\n * Recovers the public key strings from `feePayerSignatures` field.\n * If you want to derive an address from public key, please use `caver.utils.publicKeyToAddress`.\n *\n * @example\n * const publicKey = caver.transaction.recoverFeePayerPublicKeys()\n *\n * @method recoverFeePayerPublicKeys\n * @param  {string} rawTx The RLP-encoded transaction string to recover public keys from `feePayerSignatures`.\n * @return {Array.<string>}\n */\n\n\nfunction recoverFeePayerPublicKeys(rawTx) {\n  const tx = TransactionDecoder.decode(rawTx);\n  if (!(tx instanceof AbstractFeeDelegatedTransaction)) throw new Error('The `caver.transaction.recoverFeePayerPublicKeys` function can only use with fee delegation transaction. For basic transactions, use `caver.transaction.recoverPublicKeys`.');\n  return tx.recoverFeePayerPublicKeys();\n}\n\nmodule.exports = {\n  decode: TransactionDecoder.decode,\n  getTransactionByHash: getTransactionByHash,\n  recoverPublicKeys: recoverPublicKeys,\n  recoverFeePayerPublicKeys: recoverFeePayerPublicKeys,\n\n  /**\n   * The LegacyTransaction class.\n   *\n   * @example\n   * caver.transaction.legacyTransaction\n   *\n   * @type {typeof LegacyTransaction}\n   * */\n  legacyTransaction: LegacyTransaction,\n\n  /**\n   * The ValueTransfer class.\n   *\n   * @example\n   * caver.transaction.valueTransfer\n   *\n   * @type {typeof ValueTransfer}\n   * */\n  valueTransfer: ValueTransfer,\n\n  /**\n   * The FeeDelegatedValueTransfer class.\n   *\n   * @example\n   * caver.transaction.feeDelegatedValueTransfer\n   *\n   * @type {typeof FeeDelegatedValueTransfer}\n   * */\n  feeDelegatedValueTransfer: FeeDelegatedValueTransfer,\n\n  /**\n   * The FeeDelegatedValueTransferWithRatio class.\n   *\n   * @example\n   * caver.transaction.feeDelegatedValueTransferWithRatio\n   *\n   * @type {typeof FeeDelegatedValueTransferWithRatio}\n   * */\n  feeDelegatedValueTransferWithRatio: FeeDelegatedValueTransferWithRatio,\n\n  /**\n   * The ValueTransferMemo class.\n   *\n   * @example\n   * caver.transaction.valueTransferMemo\n   *\n   * @type {typeof ValueTransferMemo}\n   * */\n  valueTransferMemo: ValueTransferMemo,\n\n  /**\n   * The FeeDelegatedValueTransferMemo class.\n   *\n   * @example\n   * caver.transaction.feeDelegatedValueTransferMemo\n   *\n   * @type {typeof FeeDelegatedValueTransferMemo}\n   * */\n  feeDelegatedValueTransferMemo: FeeDelegatedValueTransferMemo,\n\n  /**\n   * The FeeDelegatedValueTransferMemoWithRatio class.\n   *\n   * @example\n   * caver.transaction.feeDelegatedValueTransferMemoWithRatio\n   *\n   * @type {typeof FeeDelegatedValueTransferMemoWithRatio}\n   * */\n  feeDelegatedValueTransferMemoWithRatio: FeeDelegatedValueTransferMemoWithRatio,\n\n  /**\n   * The AccountUpdate class.\n   *\n   * @example\n   * caver.transaction.accountUpdate\n   *\n   * @type {typeof AccountUpdate}\n   * */\n  accountUpdate: AccountUpdate,\n\n  /**\n   * The FeeDelegatedAccountUpdate class.\n   *\n   * @example\n   * caver.transaction.feeDelegatedAccountUpdate\n   *\n   * @type {typeof FeeDelegatedAccountUpdate}\n   * */\n  feeDelegatedAccountUpdate: FeeDelegatedAccountUpdate,\n\n  /**\n   * The FeeDelegatedAccountUpdateWithRatio class.\n   *\n   * @example\n   * caver.transaction.feeDelegatedAccountUpdateWithRatio\n   *\n   * @type {typeof FeeDelegatedAccountUpdateWithRatio}\n   * */\n  feeDelegatedAccountUpdateWithRatio: FeeDelegatedAccountUpdateWithRatio,\n\n  /**\n   * The SmartContractDeploy class.\n   *\n   * @example\n   * caver.transaction.smartContractDeploy\n   *\n   * @type {typeof SmartContractDeploy}\n   * */\n  smartContractDeploy: SmartContractDeploy,\n\n  /**\n   * The FeeDelegatedSmartContractDeploy class.\n   *\n   * @example\n   * caver.transaction.feeDelegatedSmartContractDeploy\n   *\n   * @type {typeof FeeDelegatedSmartContractDeploy}\n   * */\n  feeDelegatedSmartContractDeploy: FeeDelegatedSmartContractDeploy,\n\n  /**\n   * The FeeDelegatedSmartContractDeployWithRatio class.\n   *\n   * @example\n   * caver.transaction.feeDelegatedSmartContractDeployWithRatio\n   *\n   * @type {typeof FeeDelegatedSmartContractDeployWithRatio}\n   * */\n  feeDelegatedSmartContractDeployWithRatio: FeeDelegatedSmartContractDeployWithRatio,\n\n  /**\n   * The SmartContractExecution class.\n   *\n   * @example\n   * caver.transaction.smartContractExecution\n   *\n   * @type {typeof SmartContractExecution}\n   * */\n  smartContractExecution: SmartContractExecution,\n\n  /**\n   * The FeeDelegatedSmartContractExecution class.\n   *\n   * @example\n   * caver.transaction.feeDelegatedSmartContractExecution\n   *\n   * @type {typeof FeeDelegatedSmartContractExecution}\n   * */\n  feeDelegatedSmartContractExecution: FeeDelegatedSmartContractExecution,\n\n  /**\n   * The FeeDelegatedSmartContractExecutionWithRatio class.\n   *\n   * @example\n   * caver.transaction.feeDelegatedSmartContractExecutionWithRatio\n   *\n   * @type {typeof FeeDelegatedSmartContractExecutionWithRatio}\n   * */\n  feeDelegatedSmartContractExecutionWithRatio: FeeDelegatedSmartContractExecutionWithRatio,\n\n  /**\n   * The Cancel class.\n   *\n   * @example\n   * caver.transaction.cancel\n   *\n   * @type {typeof Cancel}\n   * */\n  cancel: Cancel,\n\n  /**\n   * The FeeDelegatedCancel class.\n   *\n   * @example\n   * caver.transaction.feeDelegatedCancel\n   *\n   * @type {typeof FeeDelegatedCancel}\n   * */\n  feeDelegatedCancel: FeeDelegatedCancel,\n\n  /**\n   * The FeeDelegatedCancelWithRatio class.\n   *\n   * @example\n   * caver.transaction.feeDelegatedCancelWithRatio\n   *\n   * @type {typeof FeeDelegatedCancelWithRatio}\n   * */\n  feeDelegatedCancelWithRatio: FeeDelegatedCancelWithRatio,\n\n  /**\n   * The ChainDataAnchoring class.\n   *\n   * @example\n   * caver.transaction.chainDataAnchoring\n   *\n   * @type {typeof ChainDataAnchoring}\n   * */\n  chainDataAnchoring: ChainDataAnchoring,\n\n  /**\n   * The FeeDelegatedChainDataAnchoring class.\n   *\n   * @example\n   * caver.transaction.feeDelegatedChainDataAnchoring\n   *\n   * @type {typeof FeeDelegatedChainDataAnchoring}\n   * */\n  feeDelegatedChainDataAnchoring: FeeDelegatedChainDataAnchoring,\n\n  /**\n   * The FeeDelegatedChainDataAnchoringWithRatio class.\n   *\n   * @example\n   * caver.transaction.feeDelegatedChainDataAnchoringWithRatio\n   *\n   * @type {typeof FeeDelegatedChainDataAnchoringWithRatio}\n   * */\n  feeDelegatedChainDataAnchoringWithRatio: FeeDelegatedChainDataAnchoringWithRatio,\n  type: TX_TYPE_STRING,\n  tag: TX_TYPE_TAG\n};","map":null,"metadata":{},"sourceType":"script"}