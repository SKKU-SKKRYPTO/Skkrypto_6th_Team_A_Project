{"ast":null,"code":"'use strict';\n\nconst ndjson = require('iterable-ndjson');\n\nconst explain = require('explain-error');\n\nconst _require = require('../lib/querystring'),\n      objectToQuery = _require.objectToQuery;\n\nconst configure = require('../lib/configure');\n\nconst _require2 = require('../lib/fetch'),\n      ok = _require2.ok,\n      toIterable = _require2.toIterable;\n\nconst SubscriptionTracker = require('./subscription-tracker');\n\nmodule.exports = configure(({\n  fetch,\n  apiUrl,\n  apiPath,\n  headers\n}) => {\n  const subsTracker = SubscriptionTracker.singleton();\n  return async (topic, handler, options) => {\n    options = options || {};\n    options.signal = subsTracker.subscribe(topic, handler, options.signal);\n    const qs = objectToQuery({\n      arg: topic,\n      discover: options.discover,\n      ...(options.qs || {})\n    });\n    const url = \"\".concat(apiUrl).concat(apiPath, \"/pubsub/sub\").concat(qs);\n    let res;\n\n    try {\n      res = await ok(fetch(url, {\n        method: 'POST',\n        signal: options.signal,\n        headers: options.headers || headers\n      }));\n    } catch (err) {\n      // Initial subscribe fail, ensure we clean up\n      subsTracker.unsubscribe(topic, handler);\n      throw err;\n    } // eslint-disable-next-line no-console\n\n\n    const onError = options.onError || (err => console.error(err));\n\n    (async () => {\n      try {\n        for await (const msg of ndjson(toIterable(res.body))) {\n          try {\n            handler({\n              from: Buffer.from(msg.from, 'base64'),\n              data: Buffer.from(msg.data, 'base64'),\n              seqno: Buffer.from(msg.seqno, 'base64'),\n              topicIDs: msg.topicIDs\n            });\n          } catch (err) {\n            onError(explain(err, 'Failed to parse pubsub message'), false); // Not fatal\n          }\n        }\n      } catch (err) {\n        // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n        // Temporarily use the name property instead.\n        if (err.type !== 'aborted' && err.name !== 'AbortError') {\n          onError(err, true); // Fatal\n        }\n      } finally {\n        subsTracker.unsubscribe(topic, handler);\n      }\n    })();\n  };\n});","map":null,"metadata":{},"sourceType":"script"}