{"ast":null,"code":"'use strict';\n\nconst FormData = require('form-data');\n\nconst _require = require('../lib/querystring'),\n      objectToQuery = _require.objectToQuery;\n\nconst configure = require('../lib/configure');\n\nconst _require2 = require('../lib/fetch'),\n      ok = _require2.ok;\n\nconst toCamel = require('../lib/to-camel');\n\nmodule.exports = configure(({\n  fetch,\n  apiUrl,\n  apiPath,\n  headers\n}) => {\n  const put = async (data, options) => {\n    options = options || {};\n    const qs = objectToQuery({\n      format: options.format,\n      mhtype: options.mhtype,\n      mhlen: options.mhlen,\n      pin: options.pin,\n      ...(options.qs || {})\n    });\n    const url = \"\".concat(apiUrl).concat(apiPath, \"/block/put\").concat(qs);\n    const body = new FormData();\n    body.append('file', data);\n    let res;\n\n    try {\n      res = await ok(fetch(url, {\n        method: 'POST',\n        signal: options.signal,\n        headers: options.headers || headers,\n        body\n      }));\n    } catch (err) {\n      // Retry with \"protobuf\"/\"cbor\" format for go-ipfs\n      // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved\n      if (options.format === 'dag-pb') {\n        return put(data, { ...options,\n          format: 'protobuf'\n        });\n      } else if (options.format === 'dag-cbor') {\n        return put(data, { ...options,\n          format: 'cbor'\n        });\n      }\n\n      throw err;\n    }\n\n    return toCamel((await res.json()));\n  };\n\n  return put;\n});","map":null,"metadata":{},"sourceType":"script"}