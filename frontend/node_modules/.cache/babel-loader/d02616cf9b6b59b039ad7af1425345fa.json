{"ast":null,"code":"var _slicedToArray = require(\"/Users/kimdoheon/IdeaProjects/skku/frontend/node_modules/@babel/runtime/helpers/slicedToArray\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst utils = require('../../../caver-utils/src/utils');\n\nconst emptySigArray = ['0x01', '0x', '0x'];\n/**\n * Representing a SignatureData class that includes ECDSA signature data string.\n *\n * @example\n * caver.wallet.keyring.signatureData\n *\n * @class\n */\n\nclass SignatureData {\n  /**\n   * creates a SignatureData.\n   *\n   * @example\n   * const signature = new caver.wallet.keyring.signatureData([\n   *     '0x0fea',\n   *     '0xade9480f584fe481bf070ab758ecc010afa15debc33e1bd75af637d834073a6e',\n   *     '0x38160105d78cef4529d765941ad6637d8dcf6bd99310e165fee1c39fff2aa27e',\n   * ])\n   *\n   * @param {Array.<string>|SignatureData} key - The ECDSA signatureData\n   */\n  constructor(signature) {\n    if (!signature) signature = emptySigArray;\n\n    if (signature instanceof SignatureData) {\n      this.v = signature.v;\n      this.r = signature.r;\n      this.s = signature.s;\n    }\n\n    if (!_.isArray(signature)) signature = utils.resolveSignature(signature);\n\n    const _signature = signature,\n          _signature2 = _slicedToArray(_signature, 3),\n          v = _signature2[0],\n          r = _signature2[1],\n          s = _signature2[2];\n\n    this.v = v;\n    this.r = r;\n    this.s = s;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get v() {\n    return this._v;\n  }\n\n  set v(v) {\n    v = v.slice(0, 2) === '0x' ? v : \"0x\".concat(v);\n    this._v = utils.makeEven(v);\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get V() {\n    return this.v;\n  }\n\n  set V(v) {\n    this.v = v;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get r() {\n    return this._r;\n  }\n\n  set r(r) {\n    r = r.slice(0, 2) === '0x' ? r : \"0x\".concat(r);\n    this._r = utils.makeEven(r);\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get R() {\n    return this.r;\n  }\n\n  set R(r) {\n    this.r = r;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get s() {\n    return this._s;\n  }\n\n  set s(s) {\n    s = s.slice(0, 2) === '0x' ? s : \"0x\".concat(s);\n    this._s = utils.makeEven(s);\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get S() {\n    return this.s;\n  }\n\n  set S(s) {\n    this.s = s;\n  }\n  /**\n   * Returns `true` if signature is same with emptySig.\n   *\n   * @example\n   * const isEmpty = signatureData.isEmpty()\n   *\n   * @return {boolean} `ture` means the signatureData is empty.\n   */\n\n\n  isEmpty() {\n    if (this.v === '0x01' && this.r === '0x' && this.s === '0x') return true;\n    return false;\n  }\n  /**\n   * Convert to array and return.\n   *\n   * @example\n   * const arrayFormat = signatureData.encode()\n   *\n   * @return {Array.<string>} An array format of signature.\n   */\n\n\n  encode() {\n    return [this.v, this.r, this.s];\n  }\n  /**\n   * Converts to combined string.\n   *\n   * @example\n   * const sig = signatureData.toString()\n   *\n   * @return {string}\n   */\n\n\n  toString() {\n    return this.v + this.r + this.s;\n  }\n  /**\n   * Checks that the signature data is the same.\n   *\n   * @example\n   * const isEqual = signatureData.isEqual([ '0x1b', '0xc6901...', '0x642d8...' ])\n   *\n   * @param {Array.<string>|SignatureData} sig - The ECDSA signatureData to compare\n   * @return {boolean}\n   */\n\n\n  isEqual(sig) {\n    sig = new SignatureData(sig);\n    return this.toString() === sig.toString();\n  }\n\n}\n/**\n * @type {SignatureData}\n *\n * @example\n * caver.wallet.keyring.signatureData.emtpySig\n */\n\n\nSignatureData.emtpySig = new SignatureData(emptySigArray);\nmodule.exports = SignatureData;","map":null,"metadata":{},"sourceType":"script"}